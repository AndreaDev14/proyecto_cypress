# This workflow will run the sanity
name: Sanity Test

on: 
  # schedule:
  #   - cron: '30 11 * * *' #(08:30 AM Buenos Aires)
  #   - cron: '0 18 * * *'  #(15:00 PM Buenos Aires)
  workflow_dispatch:
  

jobs:
  run:
    name: Cypress run
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # with:
        #   ref: modular-POM

      - name: Configure environment
        run: |
          {
            echo "LOCATION=https://www.saucedemo.com/v1"
            echo "TEST_SUITE=e2e:sanity"
            echo "BROWSER=electron"
            echo "ENVIRONMENT=Production"
          } >> "$GITHUB_ENV"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Clean reports and version
        run: |
          rm -f version.txt
          rm -rf cypress/reports/*
          
      - name: Run Tests
        uses: cypress-io/github-action@v6
        with:
          command: npm run ${{ env.TEST_SUITE }} -- --browser ${{ env.BROWSER }}
        env:
           CYPRESS_USER_EMAIL: ${{ secrets.CYPRESS_USER_EMAIL }}
          CYPRESS_USER_PASSWORD: ${{ secrets.CYPRESS_USER_PASSWORD }}
          LOCATION: ${{ env.LOCATION }}
          TEST_SUITE: ${{ env.TEST_SUITE }}
          BROWSER: ${{ env.BROWSER }}

      - name: Generate combined report
        if: always()
        run: npm run report

      - name: Upload Cypress Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Cypress Error Screenshots
          path: cypress/reports/screenshots/**/*.png

      - name: Upload Cypress Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Cypress Test Report
          path: cypress/reports/index.html

      - name: Upload Json Combined Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Json Combined Results
          path: cypress/reports/combined.json

      - name: Get version from Cypress
        if: always()
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
          echo "version: $(cat version.txt)"

      - name: Extract test summary
        if: always()
        shell: bash
        run: |
          TEST_SUMMARY=$(node -e '
            const data = require("./cypress/reports/combined.json");
            const stats = data.stats || {};
            const passed = stats.passes || 0;
            const total = stats.tests || 0;
            const percent = total > 0 ? Math.round((passed / total) * 100) : 0;
            const durationSec = stats.duration ? (stats.duration / 1000).toFixed(1) : 0;
            console.log(`${passed}/${total} tests passed (${percent}%) in ${durationSec}s`);
          ')
          echo "TEST_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$TEST_SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Summary: $TEST_SUMMARY"

      - name: Extract suite metrics
        if: always()
        shell: bash
        run: |
          SUITE_METRICS=$(node -e '
            const data = require("./cypress/reports/combined.json");
            const metrics = [];
            function findSuites(suites) {
              for (const suite of suites || []) {
                if ((suite.title || "").trim() !== "" && suite.duration) {
                  metrics.push(`${suite.title.trim()}: ${(suite.duration/1000).toFixed(1)}s`);
                }
                findSuites(suite.suites || []);
              }
            }
            for (const result of data.results || []) {
              findSuites(result.suites || []);
            }
            console.log(metrics.join(" | "));
          ')
          echo "SUITE_METRICS<<EOF" >> $GITHUB_ENV
          echo "$SUITE_METRICS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Suite metrics: $SUITE_METRICS"

      - name: Extract titles of all failed tests
        if: failure()
        run: |
          FAILED_TESTS=$(node -e "
            const data = require('./cypress/reports/combined.json');
            const failedTests = [];
            function findFailedTests(suites) {
              for (const suite of suites || []) {
                for (const test of suite.tests || []) {
                  if (test.state === 'failed' && (test.title || '').trim() !== '') {
                    failedTests.push(test.title.trim());
                  }
                }
                findFailedTests(suite.suites || []);
              }
            }
            for (const result of data.results || []) {
              findFailedTests(result.suites || []);
            }
            console.log(failedTests.join(' | '));
          ")
          echo "FAILED_TESTS<<EOF" >> $GITHUB_ENV
          echo "$FAILED_TESTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Failed test titles:"
          echo "$FAILED_TESTS"

      - name: Collect error messages
        if: failure()
        run: |
          ERROR_MESSAGES=$(node -e "
            const data = require('./cypress/reports/combined.json');
            const messages = [];
            function findErrors(suites) {
              for (const suite of suites || []) {
                for (const test of suite.tests || []) {
                  if (test.state === 'failed' && test.err && test.err.message) {
                    messages.push(test.err.message);
                  }
                }
                findErrors(suite.suites || []);
              }
            }
            for (const result of data.results || []) {
              findErrors(result.suites || []);
            }
            console.log(messages.join('\n\n'));
          ")
          echo "ERROR_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$ERROR_MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Error messages:"
          echo "$ERROR_MESSAGES"

      - name: Extract suite titles of all passed tests
        if: always()
        run: |
          PASSED_SUITES=$(node -e "
            const data = require('./cypress/reports/combined.json');
            const passedSuites = [];
            function checkSuites(suites) {
              for (const suite of suites || []) {
                if ((suite.failures || []).length === 0 && (suite.title || '').trim() !== '') {
                  passedSuites.push(suite.title.trim());
                }
                checkSuites(suite.suites || []);
              }
            }
            for (const result of data.results || []) {
              checkSuites(result.suites || []);
            }
            console.log(passedSuites.join(' | '));
          ")
          echo "PASSED_SUITES<<EOF" >> $GITHUB_ENV
          echo "$PASSED_SUITES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Passed suite titles:"
          echo "$PASSED_SUITES"

      - name: Extract screenshot folder name
        if: failure()
        run: |
          FOLDER=$(find cypress/reports/screenshots -mindepth 1 -maxdepth 1 -type d | head -n 1 | xargs basename)
          echo "SCREENSHOT_FOLDER=$FOLDER" >> $GITHUB_ENV
          echo "Screenshot folder: $FOLDER"

      - name: Extract screenshot name (URL-encoded)
        if: failure()
        run: |
          FILE_PATH=$(find cypress/reports/screenshots -type f -name '*.png' | head -n 1)
          FILE_NAME=$(basename "$FILE_PATH")
          FILE_NAME_ENCODED=$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))" "$FILE_NAME")

          echo "SCREENSHOT_NAME=$FILE_NAME_ENCODED" >> $GITHUB_ENV
          echo "Screenshot name (encoded): $FILE_NAME_ENCODED"

      - name: Encode test suite for URL
        if: failure()
        run: |
          ENCODED_TEST_SUITE=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${{ env.TEST_SUITE }}'))")
          echo "ENCODED_TEST_SUITE=$ENCODED_TEST_SUITE" >> $GITHUB_ENV

      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_FAILED}}
          SLACK_COLOR: '#FF0000'
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: |

            *:cypress_logo:  | ${{ env.TEST_SUITE }} :qa:*
            
            *Run:* [#${{ github.run_number }}](https://github.com/Mercap/-cypress/actions/runs/${{ github.run_id }})
            *Environment:* `${{ env.ENVIRONMENT }}`
            * Version:* `${{ env.VERSION }}`
            *Browser:* `${{ env.BROWSER }}`

            *üìä Summary:* ${{ env.TEST_SUMMARY }}
            *‚úÖ Passed Tests Suite:* ${{ env.PASSED_SUITES }}
            *‚ùå Failed Tests:* ${{ env.FAILED_TESTS }}

            *üîó Links*
            [Test Report](https://andreadev14.github.io/cypress_reports/${{ env.ENVIRONMENT }}/${{ env.TEST_SUITE }})
            [Error Screenshot](https://andreadev14.github.io/cypress_reports/${{ env.ENVIRONMENT }}/${{ env.ENCODED_TEST_SUITE }}/screenshots/${{ env.SCREENSHOT_FOLDER }}/${{ env.SCREENSHOT_NAME }})

            *üõë Error Messages:* 
              \`\`\`
              ${{ env.ERROR_MESSAGES }}
              \`\`\`
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON_EMOJI: ':warning:'
      
      - name: Notify Slack on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PASSED }}
          SLACK_COLOR: 'good'
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: |

            *:cypress_logo:  | ${{ env.TEST_SUITE }} :qa:*

            *Run:* [#${{ github.run_number }}](https://github.com/andreadev14/cypress_reports/actions/runs/${{ github.run_id }})
            *Environment:* `${{ env.ENVIRONMENT }}`
            * Version:* `${{ env._VERSION }}`
            *Browser:* `${{ env.BROWSER }}`

            *üìä Summary:* ${{ env.TEST_SUMMARY }}
            *üìà Suite Metrics:* ${{ env.SUITE_METRICS }}

            *üîó Links*
            [Test Report](https://andreadev14.github.io/cypress_reports/${{ env.ENVIRONMENT }}/${{ env.TEST_SUITE }})
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON_EMOJI: ':white_check_mark:'

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GH_PAGES_TOKEN }}
          publish_dir: ./cypress/reports
          destination_dir: ${{ env.ENVIRONMENT }}/${{ env.TEST_SUITE }}
          publish_branch: gh-pages
          external_repository: andreadev14/cypress_reports