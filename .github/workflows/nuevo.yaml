# This workflow will run the end-to-end tests
name: Nuevo E2E

on: 
  workflow_dispatch:
    inputs:
      Environment:
        description: 'Environment to run the tests on'
        required: true
        default: 'production'
        type: choice
        options:
          - 'production'
          - 'testing'
      Browser:
        description: 'Browser to run the tests on'
        required: true
        default: 'chrome'
        type: choice
        options:
          - 'chrome'
          - 'firefox'
          - 'edge'
          - 'electron'
      Test:
        description: 'Test to run'
        required: true
        default: 'sanity test'
        type: choice
        options:
          - 'smoke test'
          - 'sanity test'

jobs:
  run:
    name: Cypress run
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure environment
        env:
          ENVIRONMENT: ${{ github.event.inputs.Environment || 'production' }}
          TEST: ${{ github.event.inputs.Test || 'sanity test' }}
          BROWSER: ${{ github.event.inputs.Browser || 'chrome' }}
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "Scheduled run detected, using default values."
            ENVIRONMENT='production'
            TEST='sanity test'
            BROWSER='chrome'
          fi
          echo "Configured Environment: $ENVIRONMENT"
          echo "Test Suite: $TEST"
          echo "Browser: $BROWSER"

          case $ENVIRONMENT in
            production)
              echo "LOCATION=https://www.saucedemo.com/v1" >> "$GITHUB_ENV"
              ;;
            testing)
              echo "LOCATION=https://www.saucedemo.com/v1" >> "$GITHUB_ENV"
              ;;
          esac
          
          case $TEST in
            "sanity test")
              echo "TEST_SUITE=e2e:sanity" >> "$GITHUB_ENV"
              ;;
            "smoke test")
              echo "TEST_SUITE=e2e:smoke" >> "$GITHUB_ENV"
              ;;
          esac

          echo "ENVIRONMENT=$ENVIRONMENT" >> "$GITHUB_ENV"
          echo "BROWSER=$BROWSER" >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          npm config set registry https://registry.npmjs.org/
          npm ci
          npx cypress install

      - name: Run tests
        env:
          CYPRESS_USER_EMAIL: ${{ secrets.CYPRESS_USER_EMAIL }}
          CYPRESS_USER_PASSWORD: ${{ secrets.CYPRESS_USER_PASSWORD }}
          LOCATION: ${{ env.LOCATION }}
          TEST_SUITE: ${{ env.TEST_SUITE }}
          BROWSER: ${{ env.BROWSER }}
        run: npm run $TEST_SUITE -- --browser $BROWSER

      # ðŸ”¹ Generar reportes despuÃ©s de los tests
      - name: Merge mochawesome reports
        if: always()
        run: |
          echo "Merging mochawesome JSON reports..."
          npm run merge-reports || true

      - name: Generate HTML report
        if: always()
        run: |
          echo "Generating final HTML report..."
          npm run generate-report || true

      - name: List report files
        if: always()
        run: |
          echo "Listing generated report files:"
          ls -R cypress/reports || true

      - name: Upload Cypress Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Cypress Error Screenshots
          path: cypress/reports/screenshots/**/*.png

      - name: Get version from Cypress
        if: always()
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
          echo "version: $(cat version.txt)"

      - name: Extract failed test full titles from json
        if: failure()
        run: |
          FAILED=$(node -e "const data = require('./cypress/reports/output.json'); const titles = []; function findFails(obj) { if (obj && typeof obj === 'object') { if (obj.state === 'failed' && obj.fullTitle) titles.push(obj.fullTitle); for (const key in obj) findFails(obj[key]); } } findFails(data); console.log(titles.join(', '));")
          echo "FAILED_TESTS=$FAILED" >> $GITHUB_ENV
          echo "Failed tests: $FAILED"

      - name: Extract failed test error message from json
        if: failure()
        run: |
          ERROR=$(node -e "const data = require('./cypress/reports/output.json'); let msg = ''; function findFail(obj) { if (obj && typeof obj === 'object') { if (obj.state === 'failed' && obj.err && obj.err.message && !msg) msg = obj.err.message; for (const key in obj) findFail(obj[key]); } } findFail(data); console.log(msg);")
          echo "ERROR_MESSAGE=$ERROR" >> $GITHUB_ENV
          echo "Error message: $ERROR"

      - name: Extract screenshot folder name
        if: failure()
        run: |
          FOLDER=$(find cypress/reports/screenshots -mindepth 1 -maxdepth 1 -type d | head -n 1 | xargs basename)
          echo "SCREENSHOT_FOLDER=$FOLDER" >> $GITHUB_ENV
          echo "Screenshot folder: $FOLDER"

      - name: Extract screenshot name (URL-encoded)
        if: failure()
        run: |
          FILE_PATH=$(find cypress/reports/screenshots -type f -name '*.png' | head -n 1)
          FILE_NAME=$(basename "$FILE_PATH")
          FILE_NAME_ENCODED=$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))" "$FILE_NAME")

          echo "SCREENSHOT_NAME=$FILE_NAME_ENCODED" >> $GITHUB_ENV
          echo "Screenshot name (encoded): $FILE_NAME_ENCODED"

      - name: Encode test suite for URL
        if: failure()
        run: |
          ENCODED_TEST_SUITE=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${{ env.TEST_SUITE }}'))")
          echo "ENCODED_TEST_SUITE=$ENCODED_TEST_SUITE" >> $GITHUB_ENV

      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_FAILED }}
          SLACK_COLOR: '#FF0000'
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: |
            *:cypress_logo:  | ${{ env.TEST_SUITE }} :bug: *
            [Test Report](https://andreadev14.github.io/cypress_reports/${{ env.ENVIRONMENT }}/${{ env.TEST_SUITE }})
            [Screenshot Error](https://andreadev14.github.io/cypress_reports/${{ env.ENVIRONMENT }}/${{ env.ENCODED_TEST_SUITE }}/screenshots/${{ env.SCREENSHOT_FOLDER }}/${{ env.SCREENSHOT_NAME }})

            *Environment:* ${{ env.ENVIRONMENT }}
            *Browser:* ${{ env.BROWSER }}
            *Version:* ${{ env.VERSION }}
            *Failed Test:* ${{ env.FAILED_TESTS }}
            *Error Message:* ${{ env.ERROR_MESSAGE }}
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON_EMOJI: ':warning:'

      - name: Notify Slack on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PASSED }}
          SLACK_COLOR: 'good'
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: |
            *:cypress_logo:  | ${{ env.TEST_SUITE }} âœ… *
            [Test Report](https://andreadev14.github.io/cypress_reports/${{ env.ENVIRONMENT }}/${{ env.TEST_SUITE }})
            
            *Environment:* ${{ env.ENVIRONMENT }}
            *Browser:* ${{ env.BROWSER }}
            *Version:* ${{ env.VERSION }}
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON_EMOJI: ':white_check_mark:'

      - name: Upload Cypress Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-report
          path: cypress/reports/index.html

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GH_PAGES_TOKEN }}
          publish_dir: ./cypress/reports
          destination_dir: ${{ env.ENVIRONMENT }}/${{ env.TEST_SUITE }}
          publish_branch: gh-pages
          external_repository: andreadev14/cypress_reports
