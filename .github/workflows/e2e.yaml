name: TESTS E2E

on: 
  workflow_dispatch:
    inputs:
      Environment:
        description: 'Environment to run the tests on'
        required: true
        default: 'production'
        type: choice
        options:
          - 'production'
          - 'testing'
      Browser:
        description: 'Browser to run the tests on'
        required: true
        default: 'chrome'
        type: choice
        options:
          - 'chrome'
          - 'firefox'
          - 'edge'
          - 'electron'
      Test:
        description: 'Test suite to run'
        required: true
        default: 'smoke test'
        type: choice
        options:
          - 'smoke test'
          - 'sanity test'

jobs:
  run:
    name: Cypress run
    timeout-minutes: 15
    runs-on: ubuntu-latest
    container:
      image: cypress/included:13.7.0
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure environment
        env:
          ENVIRONMENT: ${{ github.event.inputs.Environment || 'production' }}
          TEST: ${{ github.event.inputs.Test || 'sanity test' }}
          BROWSER: ${{ github.event.inputs.Browser || 'chrome' }}
        run: |
          echo "Configured Environment: $ENVIRONMENT"
          echo "Test Suite: $TEST"
          echo "Browser: $BROWSER"

          case $ENVIRONMENT in
            production)
              LOCATION="https://www.saucedemo.com/v1/"
              ;;
            testing)
              LOCATION="https://www.saucedemo.com/v1/"
              ;;
          esac

          echo "LOCATION=$LOCATION" >> $GITHUB_ENV
          echo "TEST_SUITE=$TEST" >> $GITHUB_ENV
          echo "BROWSER=$BROWSER" >> $GITHUB_ENV
    
      - name: Setup dependencies
        run: |
          npm config set registry https://registry.npmjs.org/
          for i in 1 2 3; do
            npm ci && break || sleep 20
          done

      - name: Check Cypress installation
        run: npx cypress verify

      - name: Run tests
        env:
          CYPRESS_USER_EMAIL: ${{ secrets.CYPRESS_USER_EMAIL }}
          CYPRESS_USER_PASSWORD: ${{ secrets.CYPRESS_USER_PASSWORD }}
          LOCATION: ${{ env.LOCATION }}
          TEST_SUITE: ${{ env.TEST_SUITE }}
          BROWSER: ${{ env.BROWSER }}
        run: |
          if [ "${{ env.TEST_SUITE }}" = "smoke test" ]; then
            npm run e2e:smoke -- --browser $BROWSER
          else
            npm run e2e:sanity -- --browser $BROWSER
          fi

      - name: Generate report
        if: always()
        run: npm run report

      - name: Upload Cypress Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Cypress Error Screenshots
          path: cypress/reports/screenshots/**/*.png

      - name: Get version from Cypress
        if: always()
        run: |
          echo "VERSION=$(cat version.txt 2>/dev/null || echo 'unknown')" >> $GITHUB_ENV
          echo "version: $(cat version.txt 2>/dev/null || echo 'unknown')"

      - name: Extract failed test full titles from json
        if: failure() && hashFiles('cypress/reports/index.json') != ''
        run: |
          FAILED=$(node -e "const data=require('./cypress/reports/index.json'); const titles=[]; function findFails(obj){if(obj&&typeof obj==='object'){if(obj.state==='failed'&&obj.fullTitle)titles.push(obj.fullTitle);for(const k in obj)findFails(obj[k]);}} findFails(data); console.log(titles.join(', '));")
          echo "FAILED_TESTS=$FAILED" >> $GITHUB_ENV

      - name: Extract failed test error message from json
        if: failure() && hashFiles('cypress/reports/index.json') != ''
        run: |
          ERROR=$(node -e "const data=require('./cypress/reports/index.json'); let msg=''; function findFail(obj){if(obj&&typeof obj==='object'){if(obj.state==='failed'&&obj.err&&obj.err.message&&!msg)msg=obj.err.message;for(const k in obj)findFail(obj[k]);}} findFail(data); console.log(msg);")
          echo "ERROR_MESSAGE=$ERROR" >> $GITHUB_ENV

      - name: Sanitize folder name
        run: |
          SAFE_TEST_SUITE=$(echo "${{ env.TEST_SUITE }}" | tr ' /' '-')
          echo "SAFE_TEST_SUITE=$SAFE_TEST_SUITE" >> $GITHUB_ENV

      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: '#FF0000'
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: |
            *${{ env.TEST_SUITE }} :bug:*
            [Test Report](https://andreadev14.github.io/cypress_reports${{ env.ENVIRONMENT }}/${{ env.SAFE_TEST_SUITE }})
            *Environment:* ${{ env.ENVIRONMENT }}
            *Browser:* ${{ env.BROWSER }}
            *Version:* ${{ env.VERSION }}
            *Failed Test:* ${{ env.FAILED_TESTS }}
            *Error Message:* ${{ env.ERROR_MESSAGE }}
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON_EMOJI: ':warning:'

      - name: Notify Slack on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CYPRESS_NOTIFICATIONS }}
          SLACK_COLOR: 'good'
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: |
            *${{ env.TEST_SUITE }} :white_check_mark:*
            [Test Report](https://andreadev14.github.io/cypress_reports${{ env.ENVIRONMENT }}/${{ env.SAFE_TEST_SUITE }})
            *Environment:* ${{ env.ENVIRONMENT }}
            *Browser:* ${{ env.BROWSER }}
            *Version:* ${{ env.VERSION }}
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON_EMOJI: ':white_check_mark:'

      - name: Upload Cypress Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Cypress Test Report
          path: cypress/reports/index.html

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GH_PAGES_TOKEN }}
          publish_dir: ./cypress/reports
          destination_dir: ${{ env.ENVIRONMENT }}/${{ env.SAFE_TEST_SUITE }}
          publish_branch: gh-pages
          external_repository: andreadev14/cypress_reports
